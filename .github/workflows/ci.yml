name: Model Converter CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  TOKENIZERS_PARALLELISM: false
  PYTHONUNBUFFERED: 1

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install flake8 black isort
    
    - name: Lint with flake8
      run: |
        flake8 model_converter_tool/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 model_converter_tool/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check --diff model_converter_tool/
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff model_converter_tool/

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11']
        exclude:
          - os: macos-latest
            python-version: '3.9'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt

    - name: Test package installation
      run: |
        pip install -e .
        python -c "from model_converter_tool.converter import ModelConverter; print('✅ Package installed successfully')"

    - name: Test CLI help
      run: |
        model-converter --help

    - name: Test fast conversions
      run: |
        python ci_fast_test.py

    - name: Test slow conversions (quantization)
      run: |
        python ci_slow_test.py

    - name: Test batch conversion
      run: |
        python -c "
        from model_converter_tool.converter import ModelConverter
        converter = ModelConverter()
        
        tasks = [
            {
                'input_source': 'gpt2',
                'output_format': 'hf',
                'output_path': 'outputs/batch_test_gpt2_hf',
                'model_type': 'text-generation',
                'device': 'cpu'
            },
            {
                'input_source': 'gpt2',
                'output_format': 'onnx',
                'output_path': 'outputs/batch_test_gpt2_onnx',
                'model_type': 'text-generation',
                'device': 'cpu'
            }
        ]
        
        results = converter.batch_convert(tasks, max_workers=2)
        success_count = sum(1 for r in results if r.get('success'))
        print(f'✅ Batch conversion: {success_count}/{len(results)} successful')
        "

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-outputs-${{ matrix.os }}-${{ matrix.python-version }}
        path: outputs/
        retention-days: 1

  integration:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt

    - name: Test integration scenarios
      run: |
        python -c "
        from model_converter_tool.converter import ModelConverter
        import os
        
        converter = ModelConverter()
        
        # Test supported formats
        formats = converter.get_supported_formats()
        print(f'✅ Supported formats: {list(formats.keys())}')
        
        # Test conversion info
        info = converter.get_conversion_info('gpt2', 'hf')
        print(f'✅ Conversion info: {info.get(\"supported\", False)}')
        
        # Test validation
        valid = converter.validate_conversion('gpt2', 'hf')
        print(f'✅ Validation: {valid}')
        
        # Test model size estimation
        size = converter._estimate_model_size('gpt2')
        print(f'✅ Model size estimation: {size:.2f} MB')
        "

    - name: Test error handling
      run: |
        python -c "
        from model_converter_tool.converter import ModelConverter
        
        converter = ModelConverter()
        
        # Test invalid model
        result = converter.convert(
            input_source='invalid-model-name',
            output_format='hf',
            output_path='outputs/invalid_test',
            model_type='text-generation',
            device='cpu'
        )
        print(f'✅ Error handling: {not result.get(\"success\", True)}')
        "

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run security scan
      run: |
        bandit -r model_converter_tool/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 7 